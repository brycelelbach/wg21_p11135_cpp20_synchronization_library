<!--
Copyright (c) 2019 NVIDIA Corporation 
Author: David Olsen <dolsen@nvidia.com>

Distributed under the Boost Software License v1.0 (boost.org/LICENSE_1_0.txt)
-->
<pre class='metadata'>
Title: Amendments to the C++20 Synchronization Library
Shortname: P1633
Revision: 1
Status: P
Group: WG21
Audience: SG1
Editor: David Olsen, NVIDIA, dolsen@nvidia.com
Editor: Olivier Giroux, NVIDIA, ogiroux@nvidia.com
URL: https://wg21.link/P1633R1
!Source: <a href="https://github.com/brycelelbach/wg21_p1135_cpp20_synchronization_library/blob/master/sync_lib_design_changes.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/brycelelbach/wg21_p1135_cpp20_synchronization_library/issues
Metadata Order: Author, This Version, Source, Issue Tracking, Project, Audience
Markup Shorthands: markdown yes
Toggle Diffs: no
No Abstract: yes
Boilerplate: style-syntax-highlighting off
</pre>

<style>
pre {
  margin-top: 0px;
  margin-bottom: 0px;
}
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}
.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}
math, span.math {
  font-family: serif;
  font-style: italic;
}
ul {
  list-style-type: "— ";
}
blockquote {
  counter-reset: paragraph;
}
div.numbered, div.newnumbered {
  margin-left: 2em;
  margin-top: 1em;
  margin-bottom: 1em;
}
div.numbered:before, div.newnumbered:before {
  position: absolute;
  margin-left: -2em;
  display-style: block;
}
div.numbered:before {
  content: counter(paragraph);
  counter-increment: paragraph;
}
div.newnumbered:before {
  content: "�";
}
div.numbered ul, div.newnumbered ul {
  counter-reset: list_item;
}
div.numbered li, div.newnumbered li {
  margin-left: 3em;
}
div.numbered li:before, div.newnumbered li:before {
  position: absolute;
  margin-left: -4.8em;
  display-style: block;
}
div.numbered li:before {
  content: "(" counter(paragraph) "." counter(list_item) ")";
  counter-increment: list_item;
}
div.newnumbered li:before {
  content: "(�." counter(list_item) ")";
  counter-increment: list_item;
}
</style>

# Introduction # {#intro}

During the wording review of the C++20 Synchronization Library,
[[P1135R4]], five design flaws were found in the paper.  Rather than
send the entire paper back to SG1 to look over the changes and risk
missing the deadline for C++20, this new paper is being written for SG1
to review.

The wording changes here have already been applied to [[P1135R5]].  If
SG1 approves these changes, then P1135 will go to LWG in its current
state.  If any of the changes are rejected by SG1, then the change will
be backed out of P1135, by applying the wording change in this paper in
reverse, before LWG gives its final approval to P1135.

# Changelog # {#changelog}

**Revision 0:** Initial version.  Included first four changes.

**Revision 1:** Add a fifth change, which removes the *Expects* clauses on the destructors of `counting_semaphore`, `latch`, and `barrier`.  Include the results of SG1 discussion of the paper in Cologne.

# Make atomic_flag::test const

## Motivation

`atomic_flag::test` does not modify the `atomic_flag` object at all,
so it should be a `const` member function.  Similarly, the first
parameter to `atomic_flag_test` and `atomic_flag_test_explicit` should
be of type `const atomic_flag*` or `const volatile atomic_flag*`.

This bug seems to have been here from the beginning.  See [[P0995R0]].
There is no record of a discussion of the const-ness of these functions.

## Wording

Modify the header synopsis for `<atomic>` in
<a href="http://eel.is/c++draft/atomics.syn">[**atomics.syn**]</a>
as follows:

<blockquote>
<pre><code>
&nbsp; <i>// 30.9, flag type and operations</i>
  struct atomic_flag;
  bool atomic_flag_test(<ins>const</ins> volatile atomic_flag*) noexcept;
  bool atomic_flag_test(<ins>const</ins> atomic_flag*) noexcept;
  bool atomic_flag_test_explicit(<ins>const</ins> volatile atomic_flag*, memory_order) noexcept;
  bool atomic_flag_test_explicit(<ins>const</ins> atomic_flag*, memory_order) noexcept;
</code></pre>
</blockquote>

Modify <a href="http://eel.is/c++draft/atomics.flag">[**atomics.flag**]</a>
as follows:

<blockquote>
<b>30.9 Flag type and operations <span style="float: right;">[atomics.flag]</span></b>

<pre><code>
namespace std {
&nbsp; struct atomic_flag {
    bool test(memory_order = memory_order::seq_cst) <ins>const</ins> volatile noexcept;
    bool test(memory_order = memory_order::seq_cst) <ins>const</ins> noexcept;

    // ...
  };

  bool atomic_flag_test(<ins>const</ins> volatile atomic_flag*) noexcept;
  bool atomic_flag_test(<ins>const</ins> atomic_flag*) noexcept;
  bool atomic_flag_test_explicit(<ins>const</ins> volatile atomic_flag*, memory_order) noexcept;
  bool atomic_flag_test_explicit(<ins>const</ins> atomic_flag*, memory_order) noexcept;

  //...
}
</code></pre>
</blockquote>

Still within section
<a href="http://eel.is/c++draft/atomics.flag">[**atomics.flag**]</a>,
change the function signatures between paragraph 4 and paragraph 5 as
follows:

<blockquote>
<pre><code>
bool atomic_flag_test(<ins>const</ins> volatile atomic_flag* object) noexcept;
bool atomic_flag_test(<ins>const</ins> atomic_flag* object) noexcept;
bool atomic_flag_test_explicit(<ins>const</ins> volatile atomic_flag* object, memory_order order) noexcept;
bool atomic_flag_test_explicit(<ins>const</ins> atomic_flag* object, memory_order order) noexcept;
bool atomic_flag::test(memory_order order = memory_order::seq_cst) <ins>const</ins> volatile noexcept;
bool atomic_flag::test(memory_order order = memory_order::seq_cst) <ins>const</ins> noexcept;
</code></pre>
</blockquote>

# Prohibit counting_semaphore&lt;-1&gt;

## Motivation

<pre><code>
&nbsp; template&lt;ptrdiff_t least_max_value = <i>implementation-defined</i>&gt;
    class counting_semaphore;
</code></pre>

Template class `counting_semaphore` has a non-type template parameter
`least_max_value` which is intended to put an upper limit on the number
of times a semaphore of that type can be simultaneously acquired.

[[P1135R3]] had no restrictions on the value of `least_max_value`.
There was nothing that prevented users from using
`counting_semaphore<0>` or `counting_semaphore<-20>`, neither of which
can do anything useful.

## Wording

Insert a new paragraph after paragraph 1 in [thread.semaphore.counting.class]:

<blockquote class="ins">
<div>`least_max_value` shall be greater than zero; otherwise the program is ill-formed.</div>
</blockquote>

# Prohibit barrier::arrive(0)

## Motivation

[[P0666R2]] and early versions of P1135 did not put any lower limit on the
value of the `update` parameter for `barrier::arrive(ptrdiff_t update)`.
While working on [[P1135R4]], wording was added to require that
`update >= 0`, since negative values don't make sense.  During
<a href="http://wiki.edg.com/bin/view/Wg21kona2019/LWG1135Notes">LWG
wording review</a> in Kona, Dan Sunderland pointed out that
`barrier::arrive(0)` would be problematic for implementations that used
a fan-in strategy rather than a counter, since it would allow threads
to wait on the barrier without arriving at the barrier.  `arrive(0)` is
of dubious usefulness even without the implementation problem, so the
lower bound of `update` is changed from zero to one, making `arrive(0)`
undefined behavior, the same as `arrive(-1)`.

## Wording

Change paragraph 13 in [thread.coord.barrier.class] as follows:

<blockquote>
```
[[nodiscard]] arrival_token arrive(ptrdiff_t update = 1);
```

<div>
*Expects:* <code>update <del>&gt;=</del><ins>&gt;</ins> 0</code> is `true`, and `update` is less than or equal to the expected count for the current barrier phase.
</div>
</blockquote>

# Allow latch::try_wait() to fail spuriously

## Motivation

The old wording for `latch::try_wait` of "<i>Returns:</i> `counter == 0`" implied that implementations needed to use `memory_order::seq_cst` for `counter` so that `try_wait` would immediately see the result of a different thread's call to `count_down`.  The new wording that allows `try_wait` to spuriously return `false` frees the implementation to use a more relaxed memory order.

## Wording

Change paragraph 13 in [thread.coord.latch.class] as follows:

<blockquote>
```
bool try_wait() const noexcept;
```

<div><i>Returns:</i> <ins>With very low probability `false`.  Otherwise</ins> `counter == 0`</div>
</blockquote>

# Remove *Expects* clauses from destructors

## Motivation

[[P1135R5]] had *Expects* clauses on the destructors of classes `counting_semaphore`, `latch`, and `barrier` which essentially stated that no threads were blocked on the object but that some threads could still have not returned from the member functions that had blocked.  That wording was a committee invention, modeled on the behavior of `condition_variable`, and was not based on existing practice.  That wording imposes an implementation burden that was not fully understood when the wording was adopted.  It would impose a cost on all users whether or not they take advantage of the additional freedom the wording grants, which goes against the principle of zero-cost overhead.

Because the wording is a requirement on the implementation, it can always be added back later if it is determined that zero-cost implementations are possible or that the cost is worth the benefit to the user of easier-to-write correct code.  But if that wording goes into C++20, it would be difficult to remove it later because that would introduce undefined behavior into valid C++20 programs.

## Wording

Remove paragraph 8 from [thread.semaphore.counting.class]:

<blockquote class="del">
```
~counting_semaphore();
```

<div class="numbered">
*Expects:* For every function call blocked on `*this`, a function call that will cause it to unblock and return has happened before this call.
[ *Note:* This relaxes the usual rules, which would have required all blocking function calls to happen before destruction. — *end note* ]
</div>
</blockquote>

Remove paragraphs 6 and 7 from [thread.coord.latch.class]:

<blockquote class="del">
```
~latch();
```

<div class="numbered">
*Expects:* No threads are blocked on `*this`. [ *Note:* May be called even if some threads have not yet returned from invocations of `wait` on this object, provided that they are unblocked. This relaxes the usual rules, which would have required all blocking function calls to happen before destruction. - *end note* ]
</div>

<div class="numbered">
*Remarks:* The destructor may block until all threads have exited invocations of `wait` on this object.
</div>
</blockquote>

Remove paragraps 11 and 12 from [thread.coord.barrier.class]:

<blockquote class="del">
```
~barrier();
```

<div class="numbered">
*Expects:* No threads are blocked at a phase synchronization point for any barrier phase of this object. [ *Note:* May be called even if some threads have not yet returned from invocations of `wait`, provided that they have unblocked. This relaxes the usual rules, which would have required all blocking function calls to happen before destruction. - *end note* ]
</div>

<div class="numbered">
*Remarks:* The destructor may block until all threads have exited invocations of `wait` on this object. 
</div>
</blockquote>

# Review by SG1

This paper was reviewed by SG1 in <a href="http://wiki.edg.com/bin/view/Wg21cologne2019/P1633R0">Cologne</a>.

When discussing the restriction on `counting_semaphore`'s `least_max_value`, the committee decided that `counting_semaphore<0>` should be allowed even though the type can't be used in any meaningful way.  But everyone agreed that `counting_semaphore<-1>` should be forbidden.  As a result, this wording change was made to [[P1135R6]]:

<blockquote>
<div>`least_max_value` shall be greater than <ins>or equal to</ins> zero; otherwise the program is ill-formed.</div>
</blockquote>

There was lots of discussion about the change to remove the *Expects* clauses of the destructors, but the committee ended up approving that change as it was presented.  So no further changes are needed to P1135.

With the change to the lower limit of `least_max_value`, SG1 strongly approved the paper.
